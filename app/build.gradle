buildscript {
    dependencies {
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath "io.fabric.tools:gradle:1.22.0"
        // Should be the last one on the classpath according to the Retrolambda website.
        classpath "me.tatarka:gradle-retrolambda:$retrolambdaVersion"
        // For lintVitalRelease's inability to deal with Lombok inside Retrolambda
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
    }
}
apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
if (useFabric) {
    apply plugin: 'io.fabric'
}
apply plugin: 'com.github.triplet.play'
apply plugin: 'me.tatarka.retrolambda'

// signingStorePassword can be defined as an environment variable:
// ORG_GRADLE_PROJECT_signingStorePassword=<the password>
// or on the command line: -PsigningStorePassword=<the password>
// Same with signingKeyAlias and <the alias>
// Same with signingKeyPassword and <the password>
// Same with signingKeyFile and <the file>
def signingPijInternationalSetup = hasProperty('signingStoreFile') && hasProperty('signingStorePassword') && hasProperty('signingKeyAlias') &&
        hasProperty('signingKeyPassword')
println "Signing ${signingPijInternationalSetup ? "available" : "not setup"}."
// Can be defined as an environment variable: ORG_GRADLE_PROJECT_serviceAccountEmail=<the email>
// or on the command line: -PserviceAccountEmail=<the account email>
// Same with pk12File and <the account file>
def serviceAccountSetup = hasProperty('serviceAccountEmail') && hasProperty('pk12File')
println "Service account ${serviceAccountSetup ? "available" : "not setup"}."


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility = rootProject.ext.sourceCompatibility
        targetCompatibility = rootProject.ext.targetCompatibility
    }
    lintOptions {
        baseline file("lint-baseline.xml")
        abortOnError true
        warningsAsErrors true
        xmlReport false
        htmlReport !ciBuild
        textReport ciBuild
        textOutput "stdout"
    }
//    sourceSets {
//        main.java.srcDirs += 'src/main/kotlin'
//        test.java.srcDirs += 'src/test/kotlin'
//    }
    playAccountConfigs {
        if (serviceAccountSetup) {
            defaultAccountConfig {
                serviceAccountEmail = project.serviceAccountEmail
                pk12File = file(project.pk12File)
            }
        }
    }

    defaultConfig {
        applicationId "com.pij.lottieshow"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode calculateVersionCode(project.version)
        versionName project.version
        vectorDrawables.useSupportLibrary = true
        resValue "string", "lottie_library_version", lottieVersion
        resConfigs "en", "fr"
        if (serviceAccountSetup) playAccountConfig = playAccountConfigs.defaultAccountConfig
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        if (signingPijInternationalSetup) {
            pijInternational {
                storeFile = file(project.signingStoreFile)
                storePassword = project.signingStorePassword
                keyAlias = project.signingKeyAlias
                keyPassword = project.signingKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField "boolean", "USE_FABRIC", "false"
        }
        release {
            minifyEnabled true
            shrinkResources true
            buildConfigField "boolean", "USE_FABRIC", useFabric ? "true" : "false"
            if (signingPijInternationalSetup) signingConfig signingConfigs.pijInternational
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

play {
    track = 'beta' // or 'rollout' or 'production' or 'alpha'
    userFraction = 0.2 // only necessary for 'rollout', in this case default is 0.1 (10% of the target)
    uploadImages = true
}

dependencies {
    compile project(":business")
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:design:$supportVersion"
    compile "com.android.support:percent:$supportVersion"
    compile "com.jakewharton:butterknife:$butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeVersion"

    compile "com.github.marcinmoskala.activitystarter:activitystarter:$activitystarterVersion"
    annotationProcessor "com.github.marcinmoskala.activitystarter:activitystarter-compiler:$activitystarterVersion"

    provided "com.google.auto.value:auto-value:$autoValueVersion"
    provided 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
//    autoValueParcelAdapter = 'com.ryanharter.auto.value:auto-value-parcel-adapter:+'

    compile "com.android.support:support-annotations:$supportVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
    compile "org.apache.commons:commons-collections4:$commonsCollectionsVersion"
//    compile "com.google.dagger:dagger-android:${daggerVersion}"
    compile "com.google.dagger:dagger-android-support:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"

    compile "io.reactivex:rxjava:rxJavaVersion"
    compile "com.artemzin.rxjava:proguard-rules:$rxJavaProguardVersion"
    compile "com.jakewharton.rxbinding:rxbinding:$rxBindingsVersion"
    compile 'com.cantrowitz:rxbroadcast:1.1.1'

    debugCompile rootProject.ext.ciBuild ?
            "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion" :
            "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    compile('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
        transitive = true;
    }
    compile "com.airbnb.android:lottie:$lottieVersion"

    testCompile "junit:junit:$junitVersion"
//    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.assertj:assertj-core:$assertjCoreVersion"

    androidTestCompile("com.android.support.test.espresso:espresso-intents:$espressoVersion") {
        exclude group: "com.android.support", module: "support-annotations"
        // Avoid conflict with dagger-android and dagger-support-android
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion") {
        exclude group: "com.android.support", module: "support-annotations"
        // Avoid conflict with dagger-android and dagger-support-android
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        // Avoid conflict with dagger-android and dagger-support-android
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
}

